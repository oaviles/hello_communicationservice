# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'

stages:
- stage: Scanning
  displayName: 'Code Scanning'

  jobs:

  - job: Code_Scanning
    displayName: Code Scanning
    pool:
      vmImage: 'windows-latest'
    
    steps:
      - script: echo Code Scanning
        displayName: Scanning Code
  
  - job: Vulnerability_Scanning
    displayName: Vulnerability Scanning
    pool:
      vmImage: 'windows-latest'
    
    steps:
      - script: echo Vulnerability Scanning
        displayName: Scanning Vulnerabilities


- stage: Build
  displayName: 'Build stage'

  jobs:

  - job: Build
    displayName: 'Build'
    pool:
      vmImage: 'windows-latest'

    steps:
    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
        publishLocation: 'Container'
    
  - job: Unit_Test
    dependsOn: Build
    condition:  succeeded()
    displayName: 'Unit Test'
    pool:
      vmImage: 'windows-latest'

    steps:
    - script: echo Unit Testing
      displayName: 'Unit Testing'

- stage: Deploy_QA
  displayName: 'Deploy Q&A Env'
  dependsOn: Build
  condition: succeeded()

  jobs: 
  - deployment: Deploy
    displayName: 'Deploy'
    environment: 'qa'
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'OA MSDN (e481ec17-af49-4f8d-bb15-ecc02fff90f9)'
              appType: 'webApp'
              WebAppName: 'oaapics-qa-002'
              packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'
  
  - job: Integration_Test
    dependsOn: Deploy
    condition:  succeeded()
    displayName: 'Integration Test'
    pool:
      vmImage: 'windows-latest'

    steps:
    - script: echo Integration Testing
      displayName: 'Integration Testing'


- stage: Deploy_Prod
  displayName: 'Deploy Prod Env'
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy'
    environment: 'production'
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'OA MSDN (e481ec17-af49-4f8d-bb15-ecc02fff90f9)'
              appType: 'webApp'
              WebAppName: 'oaapics001'
              packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'
